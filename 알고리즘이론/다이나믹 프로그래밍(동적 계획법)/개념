다이나믹 프로그래밍
- 메모리 공간을 약간 더 사용하면 연산 속도를 비약적으로 증가시킬 수 있는 방법

- 탑다운과 바텀업 2가지 방식, 메모이제이션 기법이 있음

- 다이나믹 프로그래밍의 전형적인 형태는 바텀업 방식

- 특정한 문제를 완전 탐색 알고리즘으로 접근했을 때 시간이 매우 오래 걸리면 다이나믹 프로그래밍을 적용할 수 있는지 해결하고자 하는 문제들의 중복 여부를 확인

- 단순히 재귀 함수로 비효율적인 프로그램을 작성한 뒤 (탑다운 방식) 작은 문제에서 구한 답이 큰 문제에서 그대로 사용될 수 있으면, 즉 메모이제이션 기법을 적용할 수 있으면 코드를 개선

 

다이나믹 프로그래밍을 사용 가능한 조건
1. 큰 문제를 작은 문제로 나눌 수 있다.

2. 작은 문제에서 구한 정답은 그것을 포함하는 큰 문제에서도 동일하다.

 

메모이제이션 기법
- 다이나믹 프로그래밍을 구현하는 방법 중 한 종류

- 한 번 구한 결과를 메모리 공간에 메모해두고 같은 식을 다시 호출하면 메모한 결과를 그대로 가져오는 기법

- 메모이제이션 값을 저장하는 방법이므로 캐싱이라고도 함

- 단순히 한 번 구한 정보를 리스트에 저장하는 것

- 재귀적으로 수행하다가 같은 정보가 필요할 때는 이미 구한 정답을 그대로 리스트에서 가져오면 됨

- 재귀 함수를 사용하면 컴퓨터 시스템에서는 함수를 다시 호출했을 때 메모리 상에 적재되는 일련의 과정을 따라야 하므로 오버헤드가 발생할 수 있음

- 따라서 재귀 함수 대신에 반복문을 사용하면 오버헤드를 줄일 수 있음

- 메모이제이션은 탑다운 방식에 국한되어 사용하는 표현

- 때에 따라서 다른 자료형을 이용할 수 있음

 

탑다운 방식 (하향식)
- 재귀 함수를 이용하여 다이나믹 프로그래밍 소스 코드를 작성하는 방법

- 큰 문제를 해결하기 위하여 작은 문제를 호출

# 한 번 계산된 결과를 메모이제이션(Memoization)하기 위한 리스트 초기화
d = [0] * 100

# 피보나치 함수(Fibonacci Function)를 재귀함수로 구현 (탑다운 다이나믹 프로그래밍)
def fibo(x):
    # 종료 조건(1 혹은 2일 때 1을 반환)
    if x == 1 or x == 2:
        return 1
    # 이미 계산한 적 있는 문제라면 그대로 반환
    if d[x] != 0:
        return d[x]
    # 아직 계산하지 않은 문제라면 점화식에 따라서 피보나치 결과 반환
    d[x] = fibo(x - 1) + fibo(x - 2)
    return d[x]

print(fibo(99))
 
바텀업 방식 (상향식)
- 단순히 반복문을 이용하여 소스코드를 작성하는 방법

- 작은 문제부터 차근차근 답을 도출

- 결과 저장용 리스트는 DP 테이블이라 부름

- 가능하다면 재귀 함수를 이용하는 탑다운 방식보다는 바텀업 방식으로 구현하는 것을 권장함

- 시스템상 재귀 함수의 스택 크기가 한정되어 있을 수 있기 때문

# 앞서 계산된 결과를 저장하기 위한 DP 테이블 초기화
d = [0] * 100

# 첫 번째 피보나치 수와 두 번째 피보나치 수는 1
d[1] = 1
d[2] = 1
n = 99

# 피보나치 함수(Fibonacci Function) 반복문으로 구현(보텀업 다이나믹 프로그래밍)
for i in range(3, n + 1):
    d[i] = d[i - 1] + d[i - 2]

print(d[n])


출처: https://s0ng.tistory.com/entry/다이나믹-프로그래밍-다이나믹-프로그래밍?category=938669 [S0NG의 정보보안 블로그]
